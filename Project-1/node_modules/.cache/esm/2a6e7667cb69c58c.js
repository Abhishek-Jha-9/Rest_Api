let express,registerControllers,loginControllers,userControllers,refreshControllers,productControllers,auth,admin;_cb6‍.x([["default",()=>_cb6‍.o]]);_cb6‍.w("express",[["default",["express"],function(v){express=v}]]);_cb6‍.w("../controllers",[["registerControllers",["registerControllers"],function(v){registerControllers=v}],["loginControllers",["loginControllers"],function(v){loginControllers=v}],["userControllers",["userControllers"],function(v){userControllers=v}],["refreshControllers",["refreshControllers"],function(v){refreshControllers=v}],["productControllers",["productControllers"],function(v){productControllers=v}]]);_cb6‍.w("../middlewares/auth",[["default",["auth"],function(v){auth=v}]]);_cb6‍.w("../middlewares/admin",[["default",["admin"],function(v){admin=v}]]);










const router = express.Router();

router.post("/register", registerControllers.register);
router.post("/login", loginControllers.login);
router.get("/getUser", auth, userControllers.getUser);
router.post("/refresh", refreshControllers.refresh);
router.post("/logout", auth, loginControllers.logout);

// For Products
router.post("/products", [auth, admin], productControllers.store);
router.put("/updateProduct/:id", [auth, admin], productControllers.update);
router.delete("/deleteProduct/:id", [auth, admin], productControllers.delete);
router.get("/getAllProducts", productControllers.getAllProducts);
router.get("/getSingleProduct/:id", productControllers.getSingleProduct);

_cb6‍.d(router);
